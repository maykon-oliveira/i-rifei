// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.Text annotations in model Account below
  // Further reading:
  // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
  // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
  url      = env("DATABASE_URL")
}

model Raffle {
  id          String        @id @default(cuid())
  title       String
  description String
  price       Float
  size        Int
  drawDate    DateTime
  drawn       Boolean       @default(false)
  // owner and winner
  ownerId     String
  owner       User          @relation("raffles", fields: [ownerId], references: [id])
  winnerId    String?
  winner      User?          @relation("rafflesWon", fields: [winnerId], references: [id])
  // tickets
  tickets     Ticket[]
  awards      RaffleAward[]
  // audit
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt
}

model RaffleAward {
  id       String @id @default(cuid())
  name     String
  raffleId String
  raffle   Raffle @relation(fields: [raffleId], references: [id])
}

model Ticket {
  id       String @id @default(cuid())
  number   Int
  raffleId String
  raffle   Raffle @relation(fields: [raffleId], references: [id], onDelete: Cascade)
  userId   String
  user     User   @relation(fields: [userId], references: [id])
}

// Necessary for Next auth
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? // @db.Text
  access_token      String? // @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? // @db.Text
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  tickets       Ticket[]
  raffles       Raffle[]  @relation("raffles")
  rafflesWon    Raffle[]  @relation("rafflesWon")
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}
